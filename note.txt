mkdir => make a folder

code a.py => make a file and code

rm a.py => delete "a.py"
rm -r -fo folderName => "recursive" delete all sub-folder until total empty;
"force" prevent warning

python in cmd to code python on cmd, quit() to exit

type(9.2) = class float
int + float => float 

2**3 = 2^3 = 8
10 // 3 = 3 #result is a integer
PEMDAS (parentheses, exponents, division, addition, subtraction)

all, at, one = 1, 2, 3

__no_touchy__ : (double underscore) private variable and leave it alone

(dynamic typing) 
a = True
a = "a cat"
a = None #a special variable that mean 0 (string 0)
a = 22 / 11

Concatenation string  
    strOne = "your"
    strTwo = "Name"
    strThree = strOne + " " strTwo

    string = "ice"
    string += " cream"

String format   
    age = 12
    print(f"Your age is {age}\n") 
    print(f"But your real age is {age + 1}")

String and Indexes 
    string = "yes sir"
    string[0] = 'y'
    string[-1] = 'r'
    string[-2] = 'i'

Get user input 
    a = input() 
    everything is string 

round(thing to round, how many decimal point)
round(a, 2) 

if a and b:
if tired or bedtime:
if not isWeekend:

== vs is
a = [1, 2, 3]
b = [1, 2, 3]
c = b
a == b #True
a is b #False it compare the memory address
b is c #True    
if not x or y mean if (not x) or y

generate a random number
import random
randomNum = random.randint(0, 2)

lowercase
"HELLO".lower() => hello
uppercase
"hello".upper() => HELLO

range(10) start 0; end 10;  
range(1, 10, 2) //start 1; end 9; step 2
range(7, 0, -1) //start 7; end 1; step 1

r = range(10)
list(r) => [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

for i in range(0, 10)
while x < 3:

print("\U0001f600") //print a emoji

========LIST==
like array in c

myList = [1, True, 6.66667, 'a']
myInt = list(range(0, 9))
see how many items: len(myList)

myList[-1] ~ myList[4] = 'a'
1 in myList #True
    
for item in myList:
    print(item)

i = 0
while i < len(colors):
    print(colors[i])
    i += 1

#ADD SOMETHING TO LIST
myList.append("Hello") #add an element to list (only one)

myInt.extend([10, 11, 12, 13]) #add multiple element to list

myList.insert(2, "Hello") #[1, True, "Hello", 6.66667, 'a']

# -1 is not the last position (it will take the list which is not added yet)
myList.insert(-1, "Hello") #[1, True, 6.66667, "Hello", 'a'] 4th position

myList.insert(len(myList), "LAST") 

#REMOVE SOMETHING FROM LIST
myList.clear() #[] it clear everything

myList.pop(1) #remove by index (1) [1, 6.66667, 'a']

myList.remove('a') #remove by value ('a') [1, True, 6.66667]
+ if it have two 'a', remove the first one
+ if it have no 'a', it return error

List method:
    + index: return the index of element
    VD: myList.index('a') # 4
    VD: myList.index('a', 1) # begin find from index 1
    VD: myList.index('a', 2, 4) # in range of [2; 4)
    if have two more it will take the first one

    + count: return the number of times x appears in the list
    VD: myList.count('a') # 1

    + reverse: reverse the element of the list  
    VD: myList.reverse() # [False, 4.5555, 'a', 1]

    + sort: sort the item of the list

    + join: technically a String method that takes an iterable argument
    VD: names = ["Le", "Adam", "Hannah"]
    output =  " ,".join(names) # Le, Adam, Hannah

    + SLICE
    some_list[start:end:step]
    VD: first_list = [1, 2, 3, 4, 5]
        first_list[1:] = [2, 3, 4, 5]
        first_list[3:] = [4, 5]
        negative number: it will start slice that many back from the end
        first_list[-1:] = [5]
    
        new-list = first_list[-3:] = [3, 4, 5] #it will create a new list
        
        first_list[:2] = [1, 2] #no take the 2nd element
        first_list[1: 3] = [2, 3]  
        negative number: how many items exclusive from the end
        first_list[:-1] = [1, 2, 3, 4]

        first_list[1::2] = [2, 4]
        first_list[::2] = [1, 3, 5]
        negative number: reverse from the end
        first_list[1::-1] = [1, 2]

        *trick with slice:
        string = "This is fun"
        string[::-1] #reverse the string

        numbers = [1, 2, 3, 4, 5]
        numbers[1:3] = ['a', 'b', 'c'] #[1, 'a', 'b', 'c', 4, 5]
    
    + swap
    VD: names = ["Adam", "Smith"]
    names[0], names[1] = names[1], names[0] #["Smith", "Adam"]

    + list comprehension
        [10*x for x in range(1, 5)] #[10, 20, 30, 40]
        [bool(item) for item in ['', [], 0]] #False, False, False 
        [string(number) for number in numbers] #['1', '2', '3', '4', '5']

        evens = [num for num in numbers if num % 2 == 0]
        [num*2 if num % 2 == 0 else num/2 for num in numbers]
        with_vowels = "This is so much fun!"
        ' '.join([char for char in with_vowels if char not in "ueoai"]) #"Ths s s mch fn"

========DICTIONARY=======
cats = {"name": "blue", "age": 4, "isCute": True}
dogs = dict(name = "red") #{'key': 'value'}
dogs["age"] #4

Iterating dictionary:
for x in dogs.values(): every value
for y in cats.keys(): every key
for x, y in mouses.items(): every item and key

Does a dictionary have a key?
"name" in cats #True
"awesome" in dogs #False

Does a dictionary have a key?
"blue" in cats.values() #True

Dictionary method:
    + clear: clear all the keys and values
        dogs.clear()
    + copy: make a copy of dictionary
        puppy = dogs.copy()
        puppy == dogs #True
        puppy is dogs #False
    + fromkeys: creates key-value pairs from comma separated values
        new-user = {}.fromkeys(['name', 'age', 'email'], 'unknown') 
        # {'name': 'unknown', 'age': 'unknown', 'email': 'unknown'}

        {}.fromkeys('new', '0') # {'n': 0,'e': 0, 'w': 0}
    + get: retrieves a key in an object and return None instead of KeyError if the key does not exist
        d = dict(a = 1, b = 2, c = 3)
        d.get('a') #1
        d.get('b') #2
        d.get('awesome') #None  

    + pop: takes a single argument (a key) and removes that key-value and return the key that was removed
        d.pop('a') # {'b': 2, 'c': 3}

    + popitem: takes no argument, remove randomly a pairs of key-value
    + update: update keys and values in dictionary with another set of key value pairs
        e = {d = 4}
        e.update(d) # {'a': 1, 'b': 2, 'c': 3, 'd': 4}

Dictionary comprehension:
    numbers = dict(first = 1, second = 2, third = 3)
    squared_numbers = {key: value ** 2 for key, value in numbers.items()}
    print(squared_numbers) #{'first': 1, 'second': 4, 'third': 9}

================Tuples and Sets==========
Tuples: it is a const lists (can not change)
+ faster than list?
+ makes code safer

alphabet = ('a', 'b', 'c', 'd', 'e')
alphabet[1] #'b'

+ can use Tuples as a keys in dictionary:
location = {
    (21, 11): "Ha Noi office", #(x, y) on map
    (45, 22): "Sai Gon office" 
}

+ some will return Tuples like .items() in dictionary:
a = {'a': 1, 'b': 2, 'c': 3}
a.items() #dict_items([('a', 1), ('b', 2), ('c', 3)])

Tuples method totally the same lists (count(value), index(value ), slice, nested Tuples)

Sets: 
+ set have no duplicate value
+ there is no order (can't access by index)

number = {1, 2, 3, 4}
remove duplicate element:
set(lists)

Sets method
    + add: if add the things have already exist it won't add
    a.add('hello')

    + remove/discard: remove one item in Sets
    if item doesn't exist in Sets remove will throw an error but discard is not
    a.remove('Ha Noi')

    + copy: creates a copy of Sets

    + clear: remove entire contents of the Sets

    + set math:
    a = {1, 2, 3, 4}
    b = {3, 4, 5, 6}
    a | b = {1, 2, 3, 4, 5, 6}
    a & b = {3, 4}

    + sets comprehension: {x*x for x in range(0,10)}

============FUNCTION=============
def name_of_function ():
    #block code

def add(a,b):
    return a + b

difference between parameters vs argument
    + parameters is variables we pass when define
    + argument is variables we pass when call

default parameters
def exponent(num, power = 2): #default of power is 2
    return num ** power

keyword argument
def full_name(first_name, last_name):
    return first_name + last_name

full_name(first_name = "Harry", last_name = "Le") #Harry Le
full_name(last_name = "Henry", first_name = "Le") #Henry Le

scope
global a
nonlocal b #some variables in scope somewhere

def say_hello():
     """HHHH"""
    return "hello"
say_hello.__doc__ #"HHH"    

*args 
    + a special operator we can pass to function 
    + it gather remaining argument as a tuple 
    + it just a parameter, call it when you need 

    def sum_all(*args): 
    sum = 0
    for val in args:
        sum += val
    return sum

    sum_all(9, 2, 5, 8) #args = (9, 2, 5, 8)

**kwargs #keyword argument
    + it gather remaining argument as a dictionary

    def fav_colors(**kwargs):
    for people, color in kwargs.items():
        print(f"{people.capitalize()}'s favorite is {color}")

    fav_colors(colt="purple", ruby="red", dan="blue") #{'colt': 'purple', 'ruby': 'red', 'dan': 'blue'}

order parameter
    1. parameters
    2. *args
    3. default parameters
    4. **kwargs

tuple, set unpacking:
    nums = [1, 2, 3] => *nums = 1, 2, 3

dict unpacking
    def add_and_multiply_numbers(a, b, c, **kwargs):
        print(a + b * c)
        print(kwargs)

    data = dict(a=1, b=2, c=3, d=4)
    **data => a = 1, b = 2, c = 3

    add_and_multiply_numbers(**data) #7 {d: 4}

=================Lambdas=======================
square = lambda num: num * num
add = lambda a, b: a + b

a function have no name
create when you just need it once time

==========Built-in Function=======
* Map and Filter

nums = [1, 2, 3, 4]

map takes two argument map(function, iterable)
triple = map(lambda x: x*3, nums)
list(triple) #[3, 6, 9, 12]

filter takes two argument map(function, iterable) func must return True or False
even = filter(lambda x: x % 2 == 0, nums)
list(even) #[2, 4]

* Any and all
all(iterable) return True if all is truthy
all([0, 1, 2, 4]) #False
all([num for num in [2, 6, 4, 8] if num % 2 == 0]) #True

any(iterable) return True if at least one element is truthy
any([0, 1, 2 , 3]) #True
any([num for num in [1, 2, 3] if num > 5]) #False   

list comprehension: [x for x in range(100)] 
generator expression: (y for y in range(100))
if you just wanna generate one time and never use again => generator expression it save space

* Sorted
sorted(iterable, key, reverse) it return a copy has been sorted
default is small -> big, alphabet
sorted(num) #[1, 2, 3, 4]

sorted(users, key = lambda user, user['name']) #sort by alphabet
sorted(user, key = len, reverse=True) big -> small

* Reversed
reversed([1, 2, 3, 4]) #[4, 3, 2, 1]

* Len 
'hello'.__len__() #5
len('hello') #5     

* abs(), sum(), round()

* zip()
nums1 = [1, 2, 3]
nums2 = [4, 5, 6]
names = ["Thomas", "Leo", "Jack"]

print(final_grade)
zip(nums1, nums2) #[(1,4), (2,5), (3,6)]

five_by_two = [(0, 1), (1, 2), (2, 3), (3, 4), (4,5)]
list(zip(*five_by_two)) #[(0, 1, 2, 3, 4), (1, 2, 3, 4, 5)]

final_grade = {pair[0]: max(pair[1], pair[2]) for pair in zip(names, nums1, nums2)}

============debug and error handling===========
raise ValueError('invalid value')
raise NameError('invalid value')

try: 
    foo 
except:
    print("an error!")

def get(d, key):
    try:
        return d[key]
    except KeyError:
        return None

try:
    num = int(input("Enter a number"))
except:
    print("That's not a number)
else:
    print("Successfully")
finally:
    print("RUN NO MATTER WHAT")

except (TypeError, ZeroDivisionError) as err:
    print(err) #it will print err message

import pdb #python debugger
pdb.set_strace() #stop somewhere

# l (list) #show current line stopped
# n (next line) #next line to stopped
# p (print) #p l (print value of l not list all code)
# c (continue) #execute all code

=========Modules========
* Built-in modules

    + import random
    random.randint(0, 100)

    + we can give an alias, use: "as"
    import random  as omg_random 
    omg_random.choice([1, 2, 3])

    + "from" keyword lets you import parts of a module
    only import what you need
    if you wanna import everything, use:  from MODULE import *

    + from random import randin, choice
    from random import shuffle as magic_number_chooser

    + import my own code
    import module1
    module1.fn()

    from module1 import fn
    fn()

    from module1 import another_fn as fn2
    fn2()

    + external modules
    
    -> is a built-in function
    -> are download from  the internet
    -> use "pip" to download and use them
    
    + magic of __name__
    -> when run, every Python file has a __name__ variable
    -> if the file is the main file being run, its value is "__main__", otherwise, its value is the file name
    -> when use import it will go into that file and execute it

    * so prevent it being call outside the main file:
        if __name__ == "__main__":
            say_sup()
    
======Making HTTP request=======
//how the internet work?

HTTP: hypertext transfer protocol
Internet is just a bunch of computer that are connected that can talk to one another

google.com not a real thing
computer needs to send a request to a particular IP, so it just concerned about IP

DNS Lookup: like a phone book for the internet
google.com =====> DNS server ====> 12.172.3.142

IP address is unique
                     
_______________________________      ===== 172.123.9.142 (GET /) ===>         __________
| Clients (e.g. your computer) |                                              | Server |
|_____________________________ |     <========= 200 OK ==============         |________|


Response status codes:
    + 2xx - Success
    + 3xx - Redirect
    + 4xx - Client error
    + 5xx - Server error

go to a URL, hit enter:
    1. DNS Lookup (url turn to IP by using DNS Lookup)
    2. computer makes a request to a server             `\
    3. server process the request                         |> request/response cycle                        
    4. server issues a response (Success or Error)      ,/

HTTP headers
    + sent with both requests and responses
    + provide additional information about the request or response

HTTP verbs
    * GET                                   |   *POST
    - Using for retrieving data             |   - Useful for writing data
    - Data passed in query string           |   - Data passed in request body
    - Should have no "side-effects"         |   - Can have "side-effects" #change the backend
    - Can be cached                         |   - Not cached
    - Can be bookmarked                     |   - Can't be bookmarked

APIs: application programming interface
+ API just allow us to write code that can get data/how to use data from another application without having to understand
how the application work
+ We just want the information, please send it back in a format that we care about, there are 2 format:
    * JSON: Javascript object notation
    * XMS
+ API is data but we not wanna HTML files we can specifies it to JSON

#402 is payment requirement

https://www.google.com/search?
q=ice+cream& #query
oq=ice+cream& #original query
aqs=chrome.0.0i271j46i433i512j0i512j46i512j0i512l2j46i340i512l2j0i512j46i512.3065j0j1&
sourceid=chrome&
ie=UTF-8

Iterator, Generator, Decorator

#Iterator
    Iterator will return one data/element when next() is called on it

#Iterable
    is an object will return an iterator when iter() is called on it

#Generator
    generator is iterators 
    generator is function return generator by the  keyword `yield`
    -> also return a iterators

    *Generator expression:
    n = (i for i in range(1000000))
    sum(n) #it will faster than sum([i for i in range(1000000)])

#Decorator
    Decorator are functions
    Decorator wrap other functions and enhance their behavior

    Example:
    def shout(fn):
        def wrapper(*args, *kwargs):
            return fn(*args, *kwargs).upper()
        return wrapper
    
    @shout
    def greet(name):
        return f"hi, i'm {name}"
    
    @shout
    def order(main, side): #if three argument
        return f"hi, i'd would like the {main} and the {side}"

====TESTING WITH PYTHON======
- test like eat vegetables

test driven development (TDD)
    + development begins by writing tests
    + once tests are written, write code to make tests pass
    + once tests pass, a feature is considered complete

red - test fail
green - write the minimal amount of code necessary to make the test pass
refactor - clean up the code, but it still work

- Assertions
    + assert was a statement
    + it really do: if not some_expression: raise AssertionsError()

    Example:
    def add(x, y):
    assert x > 0 and y > 0, "Both numbers must be positive"
    return x + y

    print(add(9, 2)) #11
    print(add(0, 1)) #AssertionsError()

    + python -O a.py #it will ignore all the Assertions

    another Example:
    def do_something(user):
        assert user.is_admin, "Only admin can do this"
        #do things...

- doctest
def double(values):
    """ double values in a list

    >>> double([1, 2, 3, 4])
    [2, 4, 6, 8]

    >>> double([])
    []
    """
    return [2 * value for value in values]

- Unit test:
    + REMEMBER ABOUT TEST FIRST, THEN WRITE CODE 
    + test smallest parts of an application in isolation (classes, func, module,...)
    
    -------------
    python comes with a built-in function module called `unittest`
    we can write unit tests encapsulated as classes that inherit from unittest.TestCase (*)
    this inheritance gives we access to many assertion helpers that let you test the behavior of your functions

    (*) TestCase is a class provides several assert methods to check for and report failures, the most commomly is:
        assertEqual(a, b); assertFalse(x), asssertIsNone(x); assertIn(x,y); assertIsInstance(a, b) (issinstance(a, b)), ...


    testing for error 
    ' self.assertRaises(IndexError) '    #star with `with` statement
    (open file unittest for more information..) 

    #how to check if `is_healthy` was a boolean
    if not isinstance(is_healthy, bool):
    raise ValueError("is_healthy must be a boolean")

    - Before and after hooks
        + useful when testing with large applications

        + code need to run before tests: setUp
            * common use cases: adding/ removing data from a test database, creating instances of class
            
        + code need to run after tests: tearDown
        
==========FILE MANIPULATION==
    * Reading files

    + read a file with the `open` function
    + `open` return a file object
    + read file object with `read` method

    + python reads file by using a cursor
    + after the file is read, the cursor is at the end

    + to move python cursor, using `seek`
        - f.seek(0) #move to beginning of file
        - f.seek(1) #move to the first index of character    

    + if you just wanna read one line `readline`
        - f.readline()
    
    + if you wanna all the lines in file use `readlines`
        - f.readlines() #['first line', 'second line', 'third line']
    
    + check if the file close or not: f.closed()
    + close file: f.close()

    * `with` statement
    with open('story.txt') as f: #it open the file and close automatically
        data = f.read() 

    * write data into file
    #create file, overwritten file
    with open('story.txt', 'w') as file:
        file.write("Writing files is great\n")
        file.write("Here's another line of text\n")
        file.write("Closing now, goodbye!\n")

    * modes for working with file
        'r' - read file (default)
        'w' - write to file (old data will be creased)
        'a' - append new text to file
        with open('story.txt', 'a') as file:
            seek(0) #up to head to append
            file.write("Writing files is great\n")
        'r+' - read and write to a file (writing based on cursor and only work on existing file)
    
    * Reading CSV file (comma separated values)
        + CSV module 
    
    Ex: from csv import DictReader
        with open("fighters.csv") as f:
            csv_DictReader = DictReader(f)
            for fighter in csv_DictReader:
                print(fighter)

    * Writing CSV files
        writer - creates a writer object for writing to CSV 

    Ex: from csv import writer
        with open("cats.csv", "w") as f:
            csv_writer = writer(f) #an object
            csv_writer.writerow(["Name", "Age"])
            csv_writer.writerow(["Blue", 3])
            csv_writer.writerow(["Kitty", 1])

    `write` create file and overwritten the content

    * in scope `with` the file will be opened, so we can access the content, but variable in
    this scope will be able beyond the scope

        Ex: with open("cats.csv", "w") as f:
                num = 1
            print(num) #1
    
    * writing CSV files: DictWriter 
    DictWriters - creates a writer object for writing using dictionaries
    fieldnames - kwarg for the DictWriter specifying headers
    writeheader - method on a writer to writer header now
    writerow - method on a writer to write a row based on a dictionary

    DictWriters, fieldnames, writeheader, writerow

    * pickle, JSON (see on file)

===========WEB SCRAPING=======
    * what is web scraping:
        + involves programmatically grabbing (get) data from a web page
        + three step: download, extract data, do whatever we want kakaka
    
    * Beautiful Soup
        + to extract data from HTML, use `beautiful soup`
        + `beautiful soup` let us negative through HTML with python
        + `beautiful soup` does not donwload HTML => we need the requests module
        

lên kế hoạch học tập hằng ngày,
hôm này làm gì, ngày mai làm gì
cân bằng giữa việc học và việc chơi,
làm ra làm học ra học không trộn lẫn


    










    



    


